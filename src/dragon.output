Terminals unused in grammar

   ELSE


状态 93 conflicts: 11 shift/reduce
状态 95 conflicts: 15 shift/reduce
状态 132 conflicts: 2 reduce/reduce
状态 134 conflicts: 15 shift/reduce
状态 135 conflicts: 15 shift/reduce
状态 136 conflicts: 15 shift/reduce
状态 137 conflicts: 15 shift/reduce
状态 138 conflicts: 15 shift/reduce
状态 139 conflicts: 15 shift/reduce
状态 140 conflicts: 11 shift/reduce
状态 141 conflicts: 11 shift/reduce
状态 142 conflicts: 11 shift/reduce
状态 143 conflicts: 11 shift/reduce
状态 146 conflicts: 15 shift/reduce
状态 147 conflicts: 15 shift/reduce
状态 148 conflicts: 15 shift/reduce


语法

    0 $accept: program $end

    1 program: class_defs

    2 class_defs: class_def class_defs
    3           | line
    4           | %empty

    5 line: error '\n'
    6     | '\n'

    7 class_def: CLASS IDENTIFIER '{' fields '}'
    8          | CLASS IDENTIFIER EXTENDS IDENTIFIER '{' fields '}'

    9 fields: field fields
   10       | %empty

   11 field: var_def
   12      | func_def

   13 var_def: var ';'

   14 var: type IDENTIFIER

   15 type: INT
   16     | BOOL
   17     | STRING
   18     | VOID
   19     | CLASS IDENTIFIER
   20     | type '[' ']'

   21 func_def: func_normal_def
   22         | func_anonymous_def

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' OP_ARROW '{' stmt '}'

   24 func_anonymous_def: '(' formals ')' OP_ARROW '{' stmt '}'

   25 formals: var ',' formals
   26        | var
   27        | %empty

   28 stmt: var_def
   29     | simple_stmt ';'
   30     | if_stmt
   31     | while_stmt
   32     | for_stmt
   33     | return_stmt ';'
   34     | print_stmt ';'

   35 simple_stmt: left_val '=' right_val

   36 left_val: expr '.' IDENTIFIER
   37         | IDENTIFIER
   38         | expr '[' expr ']'

   39 right_val: expr
   40          | call
   41          | %empty

   42 if_stmt: IF '(' bool_expr ')' '{' stmt '}'

   43 while_stmt: WHILE '(' bool_expr ')' '{' stmt '}'

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt ')' '{' stmt '}'

   45 return_stmt: RETURN
   46            | RETURN expr

   47 print_stmt: PRINT '(' expr ')'

   48 call: expr '.' IDENTIFIER '(' actuals ')'
   49     | IDENTIFIER '(' actuals ')'
   50     | func_anonymous_def '(' actuals ')'

   51 actuals: expr ',' actuals
   52        | expr
   53        | %empty

   54 bool_expr: expr

   55 expr: constant
   56     | left_val
   57     | THIS
   58     | call
   59     | '(' expr ')'
   60     | expr '+' expr
   61     | expr '-' expr
   62     | expr '*' expr
   63     | expr '/' expr
   64     | expr '%' expr
   65     | '-' expr
   66     | expr '<' expr
   67     | expr OP_LE expr
   68     | expr '>' expr
   69     | expr OP_GE expr
   70     | expr OP_EQ expr
   71     | expr OP_NE expr
   72     | expr OP_AND expr
   73     | expr OP_OR expr
   74     | '!' expr
   75     | READINTEGER '(' ')'
   76     | READLINE '(' ')'
   77     | NEW IDENTIFIER '(' actuals ')'
   78     | NEW type '[' expr ']'

   79 constant: CONSTANT_INT
   80         | CONSTANT_BOOL
   81         | CONSTANT_STRING
   82         | NIL


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 5 6
'!' (33) 74
'%' (37) 64
'(' (40) 23 24 42 43 44 47 48 49 50 59 75 76 77
')' (41) 23 24 42 43 44 47 48 49 50 59 75 76 77
'*' (42) 62
'+' (43) 60
',' (44) 25 51
'-' (45) 61 65
'.' (46) 36 48
'/' (47) 63
';' (59) 13 29 33 34 44
'<' (60) 66
'=' (61) 23 35
'>' (62) 68
'[' (91) 20 38 78
']' (93) 20 38 78
'{' (123) 7 8 23 24 42 43 44
'}' (125) 7 8 23 24 42 43 44
error (256) 5
IDENTIFIER (258) 7 8 14 19 23 36 37 48 49 77
CONSTANT_BOOL (259) 80
CONSTANT_INT (260) 79
CONSTANT_STRING (261) 81
OP_AND (262) 72
OP_OR (263) 73
OP_LE (264) 67
OP_GE (265) 69
OP_EQ (266) 70
OP_NE (267) 71
OP_ARROW (268) 23 24
BOOL (269) 16
INT (270) 15
STRING (271) 17
NIL (272) 82
VOID (273) 18
CLASS (274) 7 8 19
EXTENDS (275) 8
NEW (276) 77 78
THIS (277) 57
IF (278) 42
ELSE (279)
FOR (280) 44
WHILE (281) 43
RETURN (282) 45 46
PRINT (283) 47
READINTEGER (284) 75
READLINE (285) 76


Nonterminals, with rules where they appear

$accept (50)
    左： 0
program (51)
    左： 1, 右： 0
class_defs (52)
    左： 2 3 4, 右： 1 2
line (53)
    左： 5 6, 右： 3
class_def (54)
    左： 7 8, 右： 2
fields (55)
    左： 9 10, 右： 7 8 9
field (56)
    左： 11 12, 右： 9
var_def (57)
    左： 13, 右： 11 28
var (58)
    左： 14, 右： 13 25 26
type (59)
    左： 15 16 17 18 19 20, 右： 14 20 23 78
func_def (60)
    左： 21 22, 右： 12
func_normal_def (61)
    左： 23, 右： 21
func_anonymous_def (62)
    左： 24, 右： 22 50
formals (63)
    左： 25 26 27, 右： 23 24 25
stmt (64)
    左： 28 29 30 31 32 33 34, 右： 23 24 42 43 44
simple_stmt (65)
    左： 35, 右： 29 44
left_val (66)
    左： 36 37 38, 右： 35 56
right_val (67)
    左： 39 40 41, 右： 35
if_stmt (68)
    左： 42, 右： 30
while_stmt (69)
    左： 43, 右： 31
for_stmt (70)
    左： 44, 右： 32
return_stmt (71)
    左： 45 46, 右： 33
print_stmt (72)
    左： 47, 右： 34
call (73)
    左： 48 49 50, 右： 40 58
actuals (74)
    左： 51 52 53, 右： 48 49 50 51 77
bool_expr (75)
    左： 54, 右： 42 43 44
expr (76)
    左： 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
    74 75 76 77 78, 右： 36 38 39 46 47 48 51 52 54 59 60 61 62 63
    64 65 66 67 68 69 70 71 72 73 74 78
constant (77)
    左： 79 80 81 82, 右： 55


State 0

    0 $accept: . program $end

    error  shift, and go to state 1
    CLASS  shift, and go to state 2
    '\n'   shift, and go to state 3

    $end  reduce using rule 4 (class_defs)

    program     转到状态 4
    class_defs  转到状态 5
    line        转到状态 6
    class_def   转到状态 7


State 1

    5 line: error . '\n'

    '\n'  shift, and go to state 8


State 2

    7 class_def: CLASS . IDENTIFIER '{' fields '}'
    8          | CLASS . IDENTIFIER EXTENDS IDENTIFIER '{' fields '}'

    IDENTIFIER  shift, and go to state 9


State 3

    6 line: '\n' .

    $default  reduce using rule 6 (line)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 10


State 5

    1 program: class_defs .

    $default  reduce using rule 1 (program)


State 6

    3 class_defs: line .

    $default  reduce using rule 3 (class_defs)


State 7

    2 class_defs: class_def . class_defs

    error  shift, and go to state 1
    CLASS  shift, and go to state 2
    '\n'   shift, and go to state 3

    $end  reduce using rule 4 (class_defs)

    class_defs  转到状态 11
    line        转到状态 6
    class_def   转到状态 7


State 8

    5 line: error '\n' .

    $default  reduce using rule 5 (line)


State 9

    7 class_def: CLASS IDENTIFIER . '{' fields '}'
    8          | CLASS IDENTIFIER . EXTENDS IDENTIFIER '{' fields '}'

    EXTENDS  shift, and go to state 12
    '{'      shift, and go to state 13


State 10

    0 $accept: program $end .

    $default  接受


State 11

    2 class_defs: class_def class_defs .

    $default  reduce using rule 2 (class_defs)


State 12

    8 class_def: CLASS IDENTIFIER EXTENDS . IDENTIFIER '{' fields '}'

    IDENTIFIER  shift, and go to state 14


State 13

    7 class_def: CLASS IDENTIFIER '{' . fields '}'

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19
    '('     shift, and go to state 20

    $default  reduce using rule 10 (fields)

    fields              转到状态 21
    field               转到状态 22
    var_def             转到状态 23
    var                 转到状态 24
    type                转到状态 25
    func_def            转到状态 26
    func_normal_def     转到状态 27
    func_anonymous_def  转到状态 28


State 14

    8 class_def: CLASS IDENTIFIER EXTENDS IDENTIFIER . '{' fields '}'

    '{'  shift, and go to state 29


State 15

   16 type: BOOL .

    $default  reduce using rule 16 (type)


State 16

   15 type: INT .

    $default  reduce using rule 15 (type)


State 17

   17 type: STRING .

    $default  reduce using rule 17 (type)


State 18

   18 type: VOID .

    $default  reduce using rule 18 (type)


State 19

   19 type: CLASS . IDENTIFIER

    IDENTIFIER  shift, and go to state 30


State 20

   24 func_anonymous_def: '(' . formals ')' OP_ARROW '{' stmt '}'

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19

    $default  reduce using rule 27 (formals)

    var      转到状态 31
    type     转到状态 32
    formals  转到状态 33


State 21

    7 class_def: CLASS IDENTIFIER '{' fields . '}'

    '}'  shift, and go to state 34


State 22

    9 fields: field . fields

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19
    '('     shift, and go to state 20

    $default  reduce using rule 10 (fields)

    fields              转到状态 35
    field               转到状态 22
    var_def             转到状态 23
    var                 转到状态 24
    type                转到状态 25
    func_def            转到状态 26
    func_normal_def     转到状态 27
    func_anonymous_def  转到状态 28


State 23

   11 field: var_def .

    $default  reduce using rule 11 (field)


State 24

   13 var_def: var . ';'

    ';'  shift, and go to state 36


State 25

   14 var: type . IDENTIFIER
   20 type: type . '[' ']'
   23 func_normal_def: type . IDENTIFIER '=' '(' formals ')' OP_ARROW '{' stmt '}'

    IDENTIFIER  shift, and go to state 37
    '['         shift, and go to state 38


State 26

   12 field: func_def .

    $default  reduce using rule 12 (field)


State 27

   21 func_def: func_normal_def .

    $default  reduce using rule 21 (func_def)


State 28

   22 func_def: func_anonymous_def .

    $default  reduce using rule 22 (func_def)


State 29

    8 class_def: CLASS IDENTIFIER EXTENDS IDENTIFIER '{' . fields '}'

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19
    '('     shift, and go to state 20

    $default  reduce using rule 10 (fields)

    fields              转到状态 39
    field               转到状态 22
    var_def             转到状态 23
    var                 转到状态 24
    type                转到状态 25
    func_def            转到状态 26
    func_normal_def     转到状态 27
    func_anonymous_def  转到状态 28


State 30

   19 type: CLASS IDENTIFIER .

    $default  reduce using rule 19 (type)


State 31

   25 formals: var . ',' formals
   26        | var .

    ','  shift, and go to state 40

    $default  reduce using rule 26 (formals)


State 32

   14 var: type . IDENTIFIER
   20 type: type . '[' ']'

    IDENTIFIER  shift, and go to state 41
    '['         shift, and go to state 38


State 33

   24 func_anonymous_def: '(' formals . ')' OP_ARROW '{' stmt '}'

    ')'  shift, and go to state 42


State 34

    7 class_def: CLASS IDENTIFIER '{' fields '}' .

    $default  reduce using rule 7 (class_def)


State 35

    9 fields: field fields .

    $default  reduce using rule 9 (fields)


State 36

   13 var_def: var ';' .

    $default  reduce using rule 13 (var_def)


State 37

   14 var: type IDENTIFIER .
   23 func_normal_def: type IDENTIFIER . '=' '(' formals ')' OP_ARROW '{' stmt '}'

    '='  shift, and go to state 43

    $default  reduce using rule 14 (var)


State 38

   20 type: type '[' . ']'

    ']'  shift, and go to state 44


State 39

    8 class_def: CLASS IDENTIFIER EXTENDS IDENTIFIER '{' fields . '}'

    '}'  shift, and go to state 45


State 40

   25 formals: var ',' . formals

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19

    $default  reduce using rule 27 (formals)

    var      转到状态 31
    type     转到状态 32
    formals  转到状态 46


State 41

   14 var: type IDENTIFIER .

    $default  reduce using rule 14 (var)


State 42

   24 func_anonymous_def: '(' formals ')' . OP_ARROW '{' stmt '}'

    OP_ARROW  shift, and go to state 47


State 43

   23 func_normal_def: type IDENTIFIER '=' . '(' formals ')' OP_ARROW '{' stmt '}'

    '('  shift, and go to state 48


State 44

   20 type: type '[' ']' .

    $default  reduce using rule 20 (type)


State 45

    8 class_def: CLASS IDENTIFIER EXTENDS IDENTIFIER '{' fields '}' .

    $default  reduce using rule 8 (class_def)


State 46

   25 formals: var ',' formals .

    $default  reduce using rule 25 (formals)


State 47

   24 func_anonymous_def: '(' formals ')' OP_ARROW . '{' stmt '}'

    '{'  shift, and go to state 49


State 48

   23 func_normal_def: type IDENTIFIER '=' '(' . formals ')' OP_ARROW '{' stmt '}'

    BOOL    shift, and go to state 15
    INT     shift, and go to state 16
    STRING  shift, and go to state 17
    VOID    shift, and go to state 18
    CLASS   shift, and go to state 19

    $default  reduce using rule 27 (formals)

    var      转到状态 31
    type     转到状态 32
    formals  转到状态 50


State 49

   24 func_anonymous_def: '(' formals ')' OP_ARROW '{' . stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    IF               shift, and go to state 58
    FOR              shift, and go to state 59
    WHILE            shift, and go to state 60
    RETURN           shift, and go to state 61
    PRINT            shift, and go to state 62
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    var_def             转到状态 68
    var                 转到状态 24
    type                转到状态 32
    func_anonymous_def  转到状态 69
    stmt                转到状态 70
    simple_stmt         转到状态 71
    left_val            转到状态 72
    if_stmt             转到状态 73
    while_stmt          转到状态 74
    for_stmt            转到状态 75
    return_stmt         转到状态 76
    print_stmt          转到状态 77
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 50

   23 func_normal_def: type IDENTIFIER '=' '(' formals . ')' OP_ARROW '{' stmt '}'

    ')'  shift, and go to state 81


State 51

   37 left_val: IDENTIFIER .
   49 call: IDENTIFIER . '(' actuals ')'

    '('  shift, and go to state 82

    $default  reduce using rule 37 (left_val)


State 52

   80 constant: CONSTANT_BOOL .

    $default  reduce using rule 80 (constant)


State 53

   79 constant: CONSTANT_INT .

    $default  reduce using rule 79 (constant)


State 54

   81 constant: CONSTANT_STRING .

    $default  reduce using rule 81 (constant)


State 55

   82 constant: NIL .

    $default  reduce using rule 82 (constant)


State 56

   77 expr: NEW . IDENTIFIER '(' actuals ')'
   78     | NEW . type '[' expr ']'

    IDENTIFIER  shift, and go to state 83
    BOOL        shift, and go to state 15
    INT         shift, and go to state 16
    STRING      shift, and go to state 17
    VOID        shift, and go to state 18
    CLASS       shift, and go to state 19

    type  转到状态 84


State 57

   57 expr: THIS .

    $default  reduce using rule 57 (expr)


State 58

   42 if_stmt: IF . '(' bool_expr ')' '{' stmt '}'

    '('  shift, and go to state 85


State 59

   44 for_stmt: FOR . '(' simple_stmt ';' bool_expr ';' simple_stmt ')' '{' stmt '}'

    '('  shift, and go to state 86


State 60

   43 while_stmt: WHILE . '(' bool_expr ')' '{' stmt '}'

    '('  shift, and go to state 87


State 61

   45 return_stmt: RETURN .
   46            | RETURN . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 45 (return_stmt)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 89
    constant            转到状态 80


State 62

   47 print_stmt: PRINT . '(' expr ')'

    '('  shift, and go to state 90


State 63

   75 expr: READINTEGER . '(' ')'

    '('  shift, and go to state 91


State 64

   76 expr: READLINE . '(' ')'

    '('  shift, and go to state 92


State 65

   65 expr: '-' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 93
    constant            转到状态 80


State 66

   24 func_anonymous_def: '(' . formals ')' OP_ARROW '{' stmt '}'
   59 expr: '(' . expr ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 27 (formals)

    var                 转到状态 31
    type                转到状态 32
    func_anonymous_def  转到状态 69
    formals             转到状态 33
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 94
    constant            转到状态 80


State 67

   74 expr: '!' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 95
    constant            转到状态 80


State 68

   28 stmt: var_def .

    $default  reduce using rule 28 (stmt)


State 69

   50 call: func_anonymous_def . '(' actuals ')'

    '('  shift, and go to state 96


State 70

   24 func_anonymous_def: '(' formals ')' OP_ARROW '{' stmt . '}'

    '}'  shift, and go to state 97


State 71

   29 stmt: simple_stmt . ';'

    ';'  shift, and go to state 98


State 72

   35 simple_stmt: left_val . '=' right_val
   56 expr: left_val .

    '='  shift, and go to state 99

    $default  reduce using rule 56 (expr)


State 73

   30 stmt: if_stmt .

    $default  reduce using rule 30 (stmt)


State 74

   31 stmt: while_stmt .

    $default  reduce using rule 31 (stmt)


State 75

   32 stmt: for_stmt .

    $default  reduce using rule 32 (stmt)


State 76

   33 stmt: return_stmt . ';'

    ';'  shift, and go to state 100


State 77

   34 stmt: print_stmt . ';'

    ';'  shift, and go to state 101


State 78

   58 expr: call .

    $default  reduce using rule 58 (expr)


State 79

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116


State 80

   55 expr: constant .

    $default  reduce using rule 55 (expr)


State 81

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' . OP_ARROW '{' stmt '}'

    OP_ARROW  shift, and go to state 117


State 82

   49 call: IDENTIFIER '(' . actuals ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 53 (actuals)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    actuals             转到状态 118
    expr                转到状态 119
    constant            转到状态 80


State 83

   77 expr: NEW IDENTIFIER . '(' actuals ')'

    '('  shift, and go to state 120


State 84

   20 type: type . '[' ']'
   78 expr: NEW type . '[' expr ']'

    '['  shift, and go to state 121


State 85

   42 if_stmt: IF '(' . bool_expr ')' '{' stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    bool_expr           转到状态 122
    expr                转到状态 123
    constant            转到状态 80


State 86

   44 for_stmt: FOR '(' . simple_stmt ';' bool_expr ';' simple_stmt ')' '{' stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    simple_stmt         转到状态 124
    left_val            转到状态 72
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 87

   43 while_stmt: WHILE '(' . bool_expr ')' '{' stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    bool_expr           转到状态 125
    expr                转到状态 123
    constant            转到状态 80


State 88

   56 expr: left_val .

    $default  reduce using rule 56 (expr)


State 89

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   46 return_stmt: RETURN expr .
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    $default  reduce using rule 46 (return_stmt)


State 90

   47 print_stmt: PRINT '(' . expr ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 126
    constant            转到状态 80


State 91

   75 expr: READINTEGER '(' . ')'

    ')'  shift, and go to state 127


State 92

   76 expr: READLINE '(' . ')'

    ')'  shift, and go to state 128


State 93

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | '-' expr .
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 65 (expr)]
    OP_OR     [reduce using rule 65 (expr)]
    OP_LE     [reduce using rule 65 (expr)]
    OP_GE     [reduce using rule 65 (expr)]
    OP_EQ     [reduce using rule 65 (expr)]
    OP_NE     [reduce using rule 65 (expr)]
    '['       [reduce using rule 65 (expr)]
    '.'       [reduce using rule 65 (expr)]
    '%'       [reduce using rule 65 (expr)]
    '<'       [reduce using rule 65 (expr)]
    '>'       [reduce using rule 65 (expr)]
    $default  reduce using rule 65 (expr)


State 94

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   59 expr: '(' expr . ')'
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    ')'     shift, and go to state 129
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116


State 95

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr
   74     | '!' expr .

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 74 (expr)]
    OP_OR     [reduce using rule 74 (expr)]
    OP_LE     [reduce using rule 74 (expr)]
    OP_GE     [reduce using rule 74 (expr)]
    OP_EQ     [reduce using rule 74 (expr)]
    OP_NE     [reduce using rule 74 (expr)]
    '+'       [reduce using rule 74 (expr)]
    '-'       [reduce using rule 74 (expr)]
    '*'       [reduce using rule 74 (expr)]
    '/'       [reduce using rule 74 (expr)]
    '['       [reduce using rule 74 (expr)]
    '.'       [reduce using rule 74 (expr)]
    '%'       [reduce using rule 74 (expr)]
    '<'       [reduce using rule 74 (expr)]
    '>'       [reduce using rule 74 (expr)]
    $default  reduce using rule 74 (expr)


State 96

   50 call: func_anonymous_def '(' . actuals ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 53 (actuals)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    actuals             转到状态 130
    expr                转到状态 119
    constant            转到状态 80


State 97

   24 func_anonymous_def: '(' formals ')' OP_ARROW '{' stmt '}' .

    $default  reduce using rule 24 (func_anonymous_def)


State 98

   29 stmt: simple_stmt ';' .

    $default  reduce using rule 29 (stmt)


State 99

   35 simple_stmt: left_val '=' . right_val

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 41 (right_val)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    right_val           转到状态 131
    call                转到状态 132
    expr                转到状态 133
    constant            转到状态 80


State 100

   33 stmt: return_stmt ';' .

    $default  reduce using rule 33 (stmt)


State 101

   34 stmt: print_stmt ';' .

    $default  reduce using rule 34 (stmt)


State 102

   72 expr: expr OP_AND . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 134
    constant            转到状态 80


State 103

   73 expr: expr OP_OR . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 135
    constant            转到状态 80


State 104

   67 expr: expr OP_LE . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 136
    constant            转到状态 80


State 105

   69 expr: expr OP_GE . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 137
    constant            转到状态 80


State 106

   70 expr: expr OP_EQ . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 138
    constant            转到状态 80


State 107

   71 expr: expr OP_NE . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 139
    constant            转到状态 80


State 108

   60 expr: expr '+' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 140
    constant            转到状态 80


State 109

   61 expr: expr '-' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 141
    constant            转到状态 80


State 110

   62 expr: expr '*' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 142
    constant            转到状态 80


State 111

   63 expr: expr '/' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 143
    constant            转到状态 80


State 112

   38 left_val: expr '[' . expr ']'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 144
    constant            转到状态 80


State 113

   36 left_val: expr '.' . IDENTIFIER
   48 call: expr '.' . IDENTIFIER '(' actuals ')'

    IDENTIFIER  shift, and go to state 145


State 114

   64 expr: expr '%' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 146
    constant            转到状态 80


State 115

   66 expr: expr '<' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 147
    constant            转到状态 80


State 116

   68 expr: expr '>' . expr

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 148
    constant            转到状态 80


State 117

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' OP_ARROW . '{' stmt '}'

    '{'  shift, and go to state 149


State 118

   49 call: IDENTIFIER '(' actuals . ')'

    ')'  shift, and go to state 150


State 119

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   51 actuals: expr . ',' actuals
   52        | expr .
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    ','     shift, and go to state 151
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    $default  reduce using rule 52 (actuals)


State 120

   77 expr: NEW IDENTIFIER '(' . actuals ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 53 (actuals)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    actuals             转到状态 152
    expr                转到状态 119
    constant            转到状态 80


State 121

   20 type: type '[' . ']'
   78 expr: NEW type '[' . expr ']'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    ']'              shift, and go to state 44
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    expr                转到状态 153
    constant            转到状态 80


State 122

   42 if_stmt: IF '(' bool_expr . ')' '{' stmt '}'

    ')'  shift, and go to state 154


State 123

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   54 bool_expr: expr .
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    $default  reduce using rule 54 (bool_expr)


State 124

   44 for_stmt: FOR '(' simple_stmt . ';' bool_expr ';' simple_stmt ')' '{' stmt '}'

    ';'  shift, and go to state 155


State 125

   43 while_stmt: WHILE '(' bool_expr . ')' '{' stmt '}'

    ')'  shift, and go to state 156


State 126

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   47 print_stmt: PRINT '(' expr . ')'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    ')'     shift, and go to state 157
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116


State 127

   75 expr: READINTEGER '(' ')' .

    $default  reduce using rule 75 (expr)


State 128

   76 expr: READLINE '(' ')' .

    $default  reduce using rule 76 (expr)


State 129

   59 expr: '(' expr ')' .

    $default  reduce using rule 59 (expr)


State 130

   50 call: func_anonymous_def '(' actuals . ')'

    ')'  shift, and go to state 158


State 131

   35 simple_stmt: left_val '=' right_val .

    $default  reduce using rule 35 (simple_stmt)


State 132

   40 right_val: call .
   58 expr: call .

    ';'       reduce using rule 40 (right_val)
    ';'       [reduce using rule 58 (expr)]
    ')'       reduce using rule 40 (right_val)
    ')'       [reduce using rule 58 (expr)]
    $default  reduce using rule 58 (expr)


State 133

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   39 right_val: expr .
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    $default  reduce using rule 39 (right_val)


State 134

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   72     | expr OP_AND expr .
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 72 (expr)]
    OP_OR     [reduce using rule 72 (expr)]
    OP_LE     [reduce using rule 72 (expr)]
    OP_GE     [reduce using rule 72 (expr)]
    OP_EQ     [reduce using rule 72 (expr)]
    OP_NE     [reduce using rule 72 (expr)]
    '+'       [reduce using rule 72 (expr)]
    '-'       [reduce using rule 72 (expr)]
    '*'       [reduce using rule 72 (expr)]
    '/'       [reduce using rule 72 (expr)]
    '['       [reduce using rule 72 (expr)]
    '.'       [reduce using rule 72 (expr)]
    '%'       [reduce using rule 72 (expr)]
    '<'       [reduce using rule 72 (expr)]
    '>'       [reduce using rule 72 (expr)]
    $default  reduce using rule 72 (expr)


State 135

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr
   73     | expr OP_OR expr .

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 73 (expr)]
    OP_OR     [reduce using rule 73 (expr)]
    OP_LE     [reduce using rule 73 (expr)]
    OP_GE     [reduce using rule 73 (expr)]
    OP_EQ     [reduce using rule 73 (expr)]
    OP_NE     [reduce using rule 73 (expr)]
    '+'       [reduce using rule 73 (expr)]
    '-'       [reduce using rule 73 (expr)]
    '*'       [reduce using rule 73 (expr)]
    '/'       [reduce using rule 73 (expr)]
    '['       [reduce using rule 73 (expr)]
    '.'       [reduce using rule 73 (expr)]
    '%'       [reduce using rule 73 (expr)]
    '<'       [reduce using rule 73 (expr)]
    '>'       [reduce using rule 73 (expr)]
    $default  reduce using rule 73 (expr)


State 136

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   67     | expr OP_LE expr .
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 67 (expr)]
    OP_OR     [reduce using rule 67 (expr)]
    OP_LE     [reduce using rule 67 (expr)]
    OP_GE     [reduce using rule 67 (expr)]
    OP_EQ     [reduce using rule 67 (expr)]
    OP_NE     [reduce using rule 67 (expr)]
    '+'       [reduce using rule 67 (expr)]
    '-'       [reduce using rule 67 (expr)]
    '*'       [reduce using rule 67 (expr)]
    '/'       [reduce using rule 67 (expr)]
    '['       [reduce using rule 67 (expr)]
    '.'       [reduce using rule 67 (expr)]
    '%'       [reduce using rule 67 (expr)]
    '<'       [reduce using rule 67 (expr)]
    '>'       [reduce using rule 67 (expr)]
    $default  reduce using rule 67 (expr)


State 137

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   69     | expr OP_GE expr .
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 69 (expr)]
    OP_OR     [reduce using rule 69 (expr)]
    OP_LE     [reduce using rule 69 (expr)]
    OP_GE     [reduce using rule 69 (expr)]
    OP_EQ     [reduce using rule 69 (expr)]
    OP_NE     [reduce using rule 69 (expr)]
    '+'       [reduce using rule 69 (expr)]
    '-'       [reduce using rule 69 (expr)]
    '*'       [reduce using rule 69 (expr)]
    '/'       [reduce using rule 69 (expr)]
    '['       [reduce using rule 69 (expr)]
    '.'       [reduce using rule 69 (expr)]
    '%'       [reduce using rule 69 (expr)]
    '<'       [reduce using rule 69 (expr)]
    '>'       [reduce using rule 69 (expr)]
    $default  reduce using rule 69 (expr)


State 138

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   70     | expr OP_EQ expr .
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 70 (expr)]
    OP_OR     [reduce using rule 70 (expr)]
    OP_LE     [reduce using rule 70 (expr)]
    OP_GE     [reduce using rule 70 (expr)]
    OP_EQ     [reduce using rule 70 (expr)]
    OP_NE     [reduce using rule 70 (expr)]
    '+'       [reduce using rule 70 (expr)]
    '-'       [reduce using rule 70 (expr)]
    '*'       [reduce using rule 70 (expr)]
    '/'       [reduce using rule 70 (expr)]
    '['       [reduce using rule 70 (expr)]
    '.'       [reduce using rule 70 (expr)]
    '%'       [reduce using rule 70 (expr)]
    '<'       [reduce using rule 70 (expr)]
    '>'       [reduce using rule 70 (expr)]
    $default  reduce using rule 70 (expr)


State 139

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   71     | expr OP_NE expr .
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 71 (expr)]
    OP_OR     [reduce using rule 71 (expr)]
    OP_LE     [reduce using rule 71 (expr)]
    OP_GE     [reduce using rule 71 (expr)]
    OP_EQ     [reduce using rule 71 (expr)]
    OP_NE     [reduce using rule 71 (expr)]
    '+'       [reduce using rule 71 (expr)]
    '-'       [reduce using rule 71 (expr)]
    '*'       [reduce using rule 71 (expr)]
    '/'       [reduce using rule 71 (expr)]
    '['       [reduce using rule 71 (expr)]
    '.'       [reduce using rule 71 (expr)]
    '%'       [reduce using rule 71 (expr)]
    '<'       [reduce using rule 71 (expr)]
    '>'       [reduce using rule 71 (expr)]
    $default  reduce using rule 71 (expr)


State 140

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   60     | expr '+' expr .
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 60 (expr)]
    OP_OR     [reduce using rule 60 (expr)]
    OP_LE     [reduce using rule 60 (expr)]
    OP_GE     [reduce using rule 60 (expr)]
    OP_EQ     [reduce using rule 60 (expr)]
    OP_NE     [reduce using rule 60 (expr)]
    '['       [reduce using rule 60 (expr)]
    '.'       [reduce using rule 60 (expr)]
    '%'       [reduce using rule 60 (expr)]
    '<'       [reduce using rule 60 (expr)]
    '>'       [reduce using rule 60 (expr)]
    $default  reduce using rule 60 (expr)


State 141

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   61     | expr '-' expr .
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 61 (expr)]
    OP_OR     [reduce using rule 61 (expr)]
    OP_LE     [reduce using rule 61 (expr)]
    OP_GE     [reduce using rule 61 (expr)]
    OP_EQ     [reduce using rule 61 (expr)]
    OP_NE     [reduce using rule 61 (expr)]
    '['       [reduce using rule 61 (expr)]
    '.'       [reduce using rule 61 (expr)]
    '%'       [reduce using rule 61 (expr)]
    '<'       [reduce using rule 61 (expr)]
    '>'       [reduce using rule 61 (expr)]
    $default  reduce using rule 61 (expr)


State 142

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   62     | expr '*' expr .
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 62 (expr)]
    OP_OR     [reduce using rule 62 (expr)]
    OP_LE     [reduce using rule 62 (expr)]
    OP_GE     [reduce using rule 62 (expr)]
    OP_EQ     [reduce using rule 62 (expr)]
    OP_NE     [reduce using rule 62 (expr)]
    '['       [reduce using rule 62 (expr)]
    '.'       [reduce using rule 62 (expr)]
    '%'       [reduce using rule 62 (expr)]
    '<'       [reduce using rule 62 (expr)]
    '>'       [reduce using rule 62 (expr)]
    $default  reduce using rule 62 (expr)


State 143

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   63     | expr '/' expr .
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 63 (expr)]
    OP_OR     [reduce using rule 63 (expr)]
    OP_LE     [reduce using rule 63 (expr)]
    OP_GE     [reduce using rule 63 (expr)]
    OP_EQ     [reduce using rule 63 (expr)]
    OP_NE     [reduce using rule 63 (expr)]
    '['       [reduce using rule 63 (expr)]
    '.'       [reduce using rule 63 (expr)]
    '%'       [reduce using rule 63 (expr)]
    '<'       [reduce using rule 63 (expr)]
    '>'       [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)


State 144

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   38         | expr '[' expr . ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    ']'     shift, and go to state 159
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116


State 145

   36 left_val: expr '.' IDENTIFIER .
   48 call: expr '.' IDENTIFIER . '(' actuals ')'

    '('  shift, and go to state 160

    $default  reduce using rule 36 (left_val)


State 146

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   64     | expr '%' expr .
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 64 (expr)]
    OP_OR     [reduce using rule 64 (expr)]
    OP_LE     [reduce using rule 64 (expr)]
    OP_GE     [reduce using rule 64 (expr)]
    OP_EQ     [reduce using rule 64 (expr)]
    OP_NE     [reduce using rule 64 (expr)]
    '+'       [reduce using rule 64 (expr)]
    '-'       [reduce using rule 64 (expr)]
    '*'       [reduce using rule 64 (expr)]
    '/'       [reduce using rule 64 (expr)]
    '['       [reduce using rule 64 (expr)]
    '.'       [reduce using rule 64 (expr)]
    '%'       [reduce using rule 64 (expr)]
    '<'       [reduce using rule 64 (expr)]
    '>'       [reduce using rule 64 (expr)]
    $default  reduce using rule 64 (expr)


State 147

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   66     | expr '<' expr .
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 66 (expr)]
    OP_OR     [reduce using rule 66 (expr)]
    OP_LE     [reduce using rule 66 (expr)]
    OP_GE     [reduce using rule 66 (expr)]
    OP_EQ     [reduce using rule 66 (expr)]
    OP_NE     [reduce using rule 66 (expr)]
    '+'       [reduce using rule 66 (expr)]
    '-'       [reduce using rule 66 (expr)]
    '*'       [reduce using rule 66 (expr)]
    '/'       [reduce using rule 66 (expr)]
    '['       [reduce using rule 66 (expr)]
    '.'       [reduce using rule 66 (expr)]
    '%'       [reduce using rule 66 (expr)]
    '<'       [reduce using rule 66 (expr)]
    '>'       [reduce using rule 66 (expr)]
    $default  reduce using rule 66 (expr)


State 148

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   68     | expr '>' expr .
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116

    OP_AND    [reduce using rule 68 (expr)]
    OP_OR     [reduce using rule 68 (expr)]
    OP_LE     [reduce using rule 68 (expr)]
    OP_GE     [reduce using rule 68 (expr)]
    OP_EQ     [reduce using rule 68 (expr)]
    OP_NE     [reduce using rule 68 (expr)]
    '+'       [reduce using rule 68 (expr)]
    '-'       [reduce using rule 68 (expr)]
    '*'       [reduce using rule 68 (expr)]
    '/'       [reduce using rule 68 (expr)]
    '['       [reduce using rule 68 (expr)]
    '.'       [reduce using rule 68 (expr)]
    '%'       [reduce using rule 68 (expr)]
    '<'       [reduce using rule 68 (expr)]
    '>'       [reduce using rule 68 (expr)]
    $default  reduce using rule 68 (expr)


State 149

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' OP_ARROW '{' . stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    IF               shift, and go to state 58
    FOR              shift, and go to state 59
    WHILE            shift, and go to state 60
    RETURN           shift, and go to state 61
    PRINT            shift, and go to state 62
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    var_def             转到状态 68
    var                 转到状态 24
    type                转到状态 32
    func_anonymous_def  转到状态 69
    stmt                转到状态 161
    simple_stmt         转到状态 71
    left_val            转到状态 72
    if_stmt             转到状态 73
    while_stmt          转到状态 74
    for_stmt            转到状态 75
    return_stmt         转到状态 76
    print_stmt          转到状态 77
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 150

   49 call: IDENTIFIER '(' actuals ')' .

    $default  reduce using rule 49 (call)


State 151

   51 actuals: expr ',' . actuals

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 53 (actuals)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    actuals             转到状态 162
    expr                转到状态 119
    constant            转到状态 80


State 152

   77 expr: NEW IDENTIFIER '(' actuals . ')'

    ')'  shift, and go to state 163


State 153

   36 left_val: expr . '.' IDENTIFIER
   38         | expr . '[' expr ']'
   48 call: expr . '.' IDENTIFIER '(' actuals ')'
   60 expr: expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   66     | expr . '<' expr
   67     | expr . OP_LE expr
   68     | expr . '>' expr
   69     | expr . OP_GE expr
   70     | expr . OP_EQ expr
   71     | expr . OP_NE expr
   72     | expr . OP_AND expr
   73     | expr . OP_OR expr
   78     | NEW type '[' expr . ']'

    OP_AND  shift, and go to state 102
    OP_OR   shift, and go to state 103
    OP_LE   shift, and go to state 104
    OP_GE   shift, and go to state 105
    OP_EQ   shift, and go to state 106
    OP_NE   shift, and go to state 107
    '+'     shift, and go to state 108
    '-'     shift, and go to state 109
    '*'     shift, and go to state 110
    '/'     shift, and go to state 111
    '['     shift, and go to state 112
    ']'     shift, and go to state 164
    '.'     shift, and go to state 113
    '%'     shift, and go to state 114
    '<'     shift, and go to state 115
    '>'     shift, and go to state 116


State 154

   42 if_stmt: IF '(' bool_expr ')' . '{' stmt '}'

    '{'  shift, and go to state 165


State 155

   44 for_stmt: FOR '(' simple_stmt ';' . bool_expr ';' simple_stmt ')' '{' stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    bool_expr           转到状态 166
    expr                转到状态 123
    constant            转到状态 80


State 156

   43 while_stmt: WHILE '(' bool_expr ')' . '{' stmt '}'

    '{'  shift, and go to state 167


State 157

   47 print_stmt: PRINT '(' expr ')' .

    $default  reduce using rule 47 (print_stmt)


State 158

   50 call: func_anonymous_def '(' actuals ')' .

    $default  reduce using rule 50 (call)


State 159

   38 left_val: expr '[' expr ']' .

    $default  reduce using rule 38 (left_val)


State 160

   48 call: expr '.' IDENTIFIER '(' . actuals ')'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    $default  reduce using rule 53 (actuals)

    func_anonymous_def  转到状态 69
    left_val            转到状态 88
    call                转到状态 78
    actuals             转到状态 168
    expr                转到状态 119
    constant            转到状态 80


State 161

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' OP_ARROW '{' stmt . '}'

    '}'  shift, and go to state 169


State 162

   51 actuals: expr ',' actuals .

    $default  reduce using rule 51 (actuals)


State 163

   77 expr: NEW IDENTIFIER '(' actuals ')' .

    $default  reduce using rule 77 (expr)


State 164

   78 expr: NEW type '[' expr ']' .

    $default  reduce using rule 78 (expr)


State 165

   42 if_stmt: IF '(' bool_expr ')' '{' . stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    IF               shift, and go to state 58
    FOR              shift, and go to state 59
    WHILE            shift, and go to state 60
    RETURN           shift, and go to state 61
    PRINT            shift, and go to state 62
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    var_def             转到状态 68
    var                 转到状态 24
    type                转到状态 32
    func_anonymous_def  转到状态 69
    stmt                转到状态 170
    simple_stmt         转到状态 71
    left_val            转到状态 72
    if_stmt             转到状态 73
    while_stmt          转到状态 74
    for_stmt            转到状态 75
    return_stmt         转到状态 76
    print_stmt          转到状态 77
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 166

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr . ';' simple_stmt ')' '{' stmt '}'

    ';'  shift, and go to state 171


State 167

   43 while_stmt: WHILE '(' bool_expr ')' '{' . stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    IF               shift, and go to state 58
    FOR              shift, and go to state 59
    WHILE            shift, and go to state 60
    RETURN           shift, and go to state 61
    PRINT            shift, and go to state 62
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    var_def             转到状态 68
    var                 转到状态 24
    type                转到状态 32
    func_anonymous_def  转到状态 69
    stmt                转到状态 172
    simple_stmt         转到状态 71
    left_val            转到状态 72
    if_stmt             转到状态 73
    while_stmt          转到状态 74
    for_stmt            转到状态 75
    return_stmt         转到状态 76
    print_stmt          转到状态 77
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 168

   48 call: expr '.' IDENTIFIER '(' actuals . ')'

    ')'  shift, and go to state 173


State 169

   23 func_normal_def: type IDENTIFIER '=' '(' formals ')' OP_ARROW '{' stmt '}' .

    $default  reduce using rule 23 (func_normal_def)


State 170

   42 if_stmt: IF '(' bool_expr ')' '{' stmt . '}'

    '}'  shift, and go to state 174


State 171

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' . simple_stmt ')' '{' stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    NIL              shift, and go to state 55
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    func_anonymous_def  转到状态 69
    simple_stmt         转到状态 175
    left_val            转到状态 72
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 172

   43 while_stmt: WHILE '(' bool_expr ')' '{' stmt . '}'

    '}'  shift, and go to state 176


State 173

   48 call: expr '.' IDENTIFIER '(' actuals ')' .

    $default  reduce using rule 48 (call)


State 174

   42 if_stmt: IF '(' bool_expr ')' '{' stmt '}' .

    $default  reduce using rule 42 (if_stmt)


State 175

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt . ')' '{' stmt '}'

    ')'  shift, and go to state 177


State 176

   43 while_stmt: WHILE '(' bool_expr ')' '{' stmt '}' .

    $default  reduce using rule 43 (while_stmt)


State 177

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt ')' . '{' stmt '}'

    '{'  shift, and go to state 178


State 178

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt ')' '{' . stmt '}'

    IDENTIFIER       shift, and go to state 51
    CONSTANT_BOOL    shift, and go to state 52
    CONSTANT_INT     shift, and go to state 53
    CONSTANT_STRING  shift, and go to state 54
    BOOL             shift, and go to state 15
    INT              shift, and go to state 16
    STRING           shift, and go to state 17
    NIL              shift, and go to state 55
    VOID             shift, and go to state 18
    CLASS            shift, and go to state 19
    NEW              shift, and go to state 56
    THIS             shift, and go to state 57
    IF               shift, and go to state 58
    FOR              shift, and go to state 59
    WHILE            shift, and go to state 60
    RETURN           shift, and go to state 61
    PRINT            shift, and go to state 62
    READINTEGER      shift, and go to state 63
    READLINE         shift, and go to state 64
    '-'              shift, and go to state 65
    '('              shift, and go to state 66
    '!'              shift, and go to state 67

    var_def             转到状态 68
    var                 转到状态 24
    type                转到状态 32
    func_anonymous_def  转到状态 69
    stmt                转到状态 179
    simple_stmt         转到状态 71
    left_val            转到状态 72
    if_stmt             转到状态 73
    while_stmt          转到状态 74
    for_stmt            转到状态 75
    return_stmt         转到状态 76
    print_stmt          转到状态 77
    call                转到状态 78
    expr                转到状态 79
    constant            转到状态 80


State 179

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt ')' '{' stmt . '}'

    '}'  shift, and go to state 180


State 180

   44 for_stmt: FOR '(' simple_stmt ';' bool_expr ';' simple_stmt ')' '{' stmt '}' .

    $default  reduce using rule 44 (for_stmt)
